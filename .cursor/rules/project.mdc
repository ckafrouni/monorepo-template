---
description: 
globs: 
alwaysApply: false
---
# Better T-Stack Project - Cursor Rules

#### Frontend Stack

- **React 19** - Latest React with Vite build tool
- **TanStack Router v1** - File-based routing solution
- **TanStack Query v5** - Data fetching and caching
- **TanStack Table v8** - Table component
- **TanStack Form v1** - Form handling
- **Vite v6** - Build tool and dev server
- **Tailwind CSS v4** - Latest styling framework
- **Radix UI** - Primitive component library (Avatar, Dialog, Dropdown, etc.)
- **Recharts v2** - Charting library
- **AI SDK** - AI integration with React hooks

_Always use the latest stable versions unless specified otherwise_

#### Backend Stack

- **Hono v4** - Web framework
- **tRPC v11** - Type-safe API layer
- **Better Auth v1** - Authentication (modern, type-safe auth)
- **Drizzle ORM v0.38** - Database toolkit and ORM
- **PostgreSQL** - Primary database with pg driver

_Always use the latest stable versions unless specified otherwise_

#### Development Tools

- **pnpm v10+** - Package manager (preferred)
- **TypeScript v5** - Type system
- **Zod v3** - Schema validation
- **Lucide React** - Icons
- **Turbo** - Monorepo build system

_Always use the latest stable versions unless specified otherwise_

## Design Principles

### Clean Industrial Design

- **Favor clean, industrial design aesthetics**
- Use minimal, functional interfaces that prioritize usability
- Implement consistent spacing and typography
- Choose neutral colors with purposeful accent colors
- Design for clarity and efficiency over decoration

### Code Quality & Debugging

- **Maintain clean HTML structure for easier debugging**
- **Use semantic, self-documenting CSS classes**
- Organize code with clear separation of concerns
- Write descriptive component and function names
- Keep nesting levels shallow for better readability

## Code Generation Guidelines

### Project Structure Adherence

- Follow the monorepo structure with `apps/`, `packages/`
- Use workspace imports for shared packages (currently using `@worspace/*` naming)
- Maintain separation between web app, server, and shared packages

### Pnpm Workspace Structure

**Apps (apps/):**

- `web` - React 19 web application with TanStack Router (main frontend)
- `server` - Hono backend with tRPC API layer
- `desktop` - Desktop application (likely Tauri-based)

**Packages (packages/):**

- `app` - Main shared React application code and routing
- `api` - tRPC API definitions and routers  
- `db` - Database schema and Drizzle configuration (PostgreSQL)
- `auth` - Authentication configuration with Better Auth

**Workspace Dependencies:**

- Use `workspace:*` for internal package references
- Leverage pnpm's efficient dependency management
- Maintain consistent versions across all packages

### File Structure & Organization

**Route-Based Architecture (TanStack Router):**

```
packages/app/src/routes/
├── __root.tsx                    # Root route layout
├── login.tsx                     # Authentication route
└── _app/                         # Main app layout
    ├── route.tsx                 # App layout route
    ├── dashboard/                # Dashboard section
    ├── analytics/                # Analytics section
    ├── playground/               # Development/testing area
    ├── project/                  # Project management
    └── todos/                    # Todo management
```

**Component Organization:**

```
packages/app/src/components/
├── ui/                           # UI components (Radix-based)
├── layout/                       # Global layout components
├── forms/                        # Shared form components
├── tables/                       # Shared table components
├── charts/                       # Shared chart/visualization components
└── [feature-component].tsx      # Feature-specific components
```

**Naming Conventions:**

- **Files**: kebab-case (`todo-list.tsx`, `analytics-dashboard.tsx`)
- **Folders with prefix `_`**: Layout routes without URL segments
- **Route parameters**: Dynamic segments as needed
- **Components**: PascalCase exports (`TodoList`, `DataTable`)
- **Folder purposes**: Use clear, descriptive names that indicate functionality

**Key Patterns:**

- **Pathless layouts**: Using `_app` for nested layout without URL segments
- **Co-located components**: Components near their usage
- **Consistent patterns**: Shared component structure across features
- **Type-safe routing**: TanStack Router with TypeScript integration

### Frontend Patterns

- Use TanStack Router for file-based routing (React 19 compatible)
- Implement tRPC for type-safe API calls
- Use TanStack Query for data fetching and caching
- **Always use TanStack libraries for consistency across the stack**
- Apply Tailwind CSS v4 for styling
- Use Radix UI primitives for accessible components
- Use TanStack Form with Zod validation
- **Prefer pnpm for all package management operations**
- Use AI SDK for AI integration features

### Backend Patterns

- Use Hono as the web framework foundation
- Use tRPC routers in `packages/api/src/routers/` for type-safe APIs
- Implement authentication with Better Auth (modern, type-safe auth)
- Use Drizzle ORM with PostgreSQL for database operations
- Follow the established schema patterns in `packages/db/src/schema/`
- Integrate Better Auth with tRPC for protected routes
- Use Better Auth sessions for user management

### Component Development

- Use Radix UI primitives as the foundation for custom components
- Use proper TypeScript interfaces and types
- Implement responsive design with Tailwind CSS v4
- Follow accessibility best practices with Radix UI
- **Maintain clean HTML structure for easier debugging**
- **Use clean, semantic CSS classes that are self-documenting**
- Use class-variance-authority (cva) for component variants
- Use clsx and tailwind-merge for conditional styling

### Key Dependencies & Integration Patterns

**UI & Styling:**
- **Radix UI** - Avatar, Checkbox, Dialog, Dropdown Menu, Label, Select, Separator, Slot, Tabs, Toggle, Tooltip
- **Tailwind CSS v4** - Latest styling with @tailwindcss/vite plugin
- **class-variance-authority** - Component variant management
- **lucide-react** - Icon system
- **next-themes** - Theme management
- **sonner** - Toast notifications
- **vaul** - Drawer/modal components

**Data & State Management:**
- **TanStack Query** - Server state management and caching
- **TanStack Form** - Form handling with validation
- **TanStack Table** - Advanced table functionality
- **@hookform/resolvers** - Form validation integration
- **zod** - Runtime type validation

**Interactions & Experience:**
- **@dnd-kit** - Drag and drop functionality (core, modifiers, sortable, utilities)
- **@ai-sdk/react** - AI chat and streaming interfaces
- **recharts** - Data visualization and charts

**Backend Integration:**
- **@trpc/client & @trpc/tanstack-react-query** - Type-safe API integration
- **better-auth** - Authentication client-side integration

### Error Handling & Performance

- Use proper error boundaries and error handling
- Implement loading states and optimistic updates
- Follow React 19 patterns and best practices
- Use Suspense for data fetching where appropriate
- Use TanStack Query for efficient caching and background updates

### Code Quality

- Use ESLint and Prettier configurations
- Follow TypeScript strict mode practices
- Implement proper testing patterns
- Use proper Git commit conventions
- Use Turbo for efficient monorepo builds

## Decision Making Process

1. **Assess uncertainty** - Am I unsure about any library usage, API, or pattern?
2. **Consult Context7** - Use MCP tools to get up-to-date documentation
3. **Verify compatibility** - Ensure the solution works with project dependencies
4. **Generate code** - Write code following project patterns and latest best practices
5. **Explain approach** - Document why specific patterns were chosen

**Remember**: Context7 provides real-time, up-to-date documentation that may differ from training data. Always prioritize Context7 information over potentially outdated knowledge when there's uncertainty.
