/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as TodosIndexImport } from './routes/todos/index'
import { Route as ProjectIndexImport } from './routes/project/index'
import { Route as PlaygroundIndexImport } from './routes/playground/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AnalyticsIndexImport } from './routes/analytics/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const TodosIndexRoute = TodosIndexImport.update({
  id: '/todos/',
  path: '/todos/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectIndexRoute = ProjectIndexImport.update({
  id: '/project/',
  path: '/project/',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundIndexRoute = PlaygroundIndexImport.update({
  id: '/playground/',
  path: '/playground/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsIndexRoute = AnalyticsIndexImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/playground/': {
      id: '/playground/'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundIndexImport
      parentRoute: typeof rootRoute
    }
    '/project/': {
      id: '/project/'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectIndexImport
      parentRoute: typeof rootRoute
    }
    '/todos/': {
      id: '/todos/'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/playground': typeof PlaygroundIndexRoute
  '/project': typeof ProjectIndexRoute
  '/todos': typeof TodosIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/playground': typeof PlaygroundIndexRoute
  '/project': typeof ProjectIndexRoute
  '/todos': typeof TodosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/playground/': typeof PlaygroundIndexRoute
  '/project/': typeof ProjectIndexRoute
  '/todos/': typeof TodosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/analytics'
    | '/dashboard'
    | '/playground'
    | '/project'
    | '/todos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/analytics'
    | '/dashboard'
    | '/playground'
    | '/project'
    | '/todos'
  id:
    | '__root__'
    | '/login'
    | '/analytics/'
    | '/dashboard/'
    | '/playground/'
    | '/project/'
    | '/todos/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  PlaygroundIndexRoute: typeof PlaygroundIndexRoute
  ProjectIndexRoute: typeof ProjectIndexRoute
  TodosIndexRoute: typeof TodosIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  PlaygroundIndexRoute: PlaygroundIndexRoute,
  ProjectIndexRoute: ProjectIndexRoute,
  TodosIndexRoute: TodosIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/analytics/",
        "/dashboard/",
        "/playground/",
        "/project/",
        "/todos/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/analytics/": {
      "filePath": "analytics/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/playground/": {
      "filePath": "playground/index.tsx"
    },
    "/project/": {
      "filePath": "project/index.tsx"
    },
    "/todos/": {
      "filePath": "todos/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
